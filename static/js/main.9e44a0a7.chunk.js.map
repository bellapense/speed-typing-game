{"version":3,"sources":["hooks/useGameLogic.js","components/TimeSelector.js","App.js","serviceWorker.js","index.js"],"names":["useGameLogic","useState","text","setText","gameLength","setGameLength","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textareaRef","useRef","useEffect","setTimeout","time","trim","split","filter","word","length","calculateWordCount","handleChange","e","value","target","updateGameLength","startGame","current","disabled","focus","TimeSelector","props","selectedTime","setSelectedTime","isSelected","buttons","map","key","className","onClick","updateSelectedTime","App","onChange","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAoEeA,MAnDf,WAAyB,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,OAEgBF,mBAAS,IAFzB,mBAEbG,EAFa,KAEDC,EAFC,OAGsBJ,mBAASG,GAH/B,mBAGbE,EAHa,KAGEC,EAHF,OAIsBN,oBAAS,GAJ/B,mBAIbO,EAJa,KAIEC,EAJF,OAKcR,mBAAS,GALvB,mBAKbS,EALa,KAKFC,EALE,KAOdC,EAAcC,iBAAO,MAyC3B,OAVAC,qBAAU,WACHN,GAAiBF,EAAgB,EAChCS,YAAW,WACPR,GAAiB,SAAAS,GAAI,OAAIA,EAAO,OACjC,KACqB,IAAlBV,IATVG,GAAiB,GACjBE,EArBJ,SAA4BT,GAExB,OADiBA,EAAKe,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAmB/BC,CAAmBpB,OAWjC,CAACI,EAAeE,IAEZ,CAACI,cAAaW,aAvCrB,SAAsBC,GAAI,IACfC,EAASD,EAAEE,OAAXD,MACPtB,EAAQsB,IAqCuBvB,OAAMM,gBAAeF,gBAAeqB,iBA7BvE,SAA0BX,GACtBT,EAAiBS,GACjBX,EAAcW,IA2BuEY,UAxBzF,WACInB,GAAiB,GACjBF,EAAiBH,GACjBD,EAAQ,IACRQ,EAAa,GACbC,EAAYiB,QAAQC,UAAW,EAC/BlB,EAAYiB,QAAQE,SAkB4ErB,c,MC3BzFsB,MAnCf,SAAsBC,GAAO,IAAD,EACgBhC,mBAAS,IADzB,mBACjBiC,EADiB,KACHC,EADG,KASxB,SAASC,EAAWpB,GAChB,OAAOkB,IAAiBlB,EAG5BF,qBAAU,WACNmB,EAAMN,iBAAiBO,KACxB,CAACD,EAAMzB,gBAEV,IAAM6B,EAfQ,CAAC,EAAG,GAAI,GAAI,IAeJC,KAAI,SAAAtB,GAAI,OAC1B,4BACIuB,IAAG,eAAUvB,GACbwB,UAAS,eAAUJ,EAAWpB,GAAQ,WAAa,IACnDyB,QAAS,kBAjBjB,SAA4BzB,GACxBiB,EAAMN,iBAAiBX,GACvBmB,EAAgBnB,GAeG0B,CAAmB1B,IAClCc,SAAUG,EAAMzB,eAEfQ,MAIT,OACI,yBAAKwB,UAAU,iBACVH,I,MCUEM,MArCf,WAAgB,IAAD,EAUT3C,IARFY,EAFW,EAEXA,YACAW,EAHW,EAGXA,aACArB,EAJW,EAIXA,KACAM,EALW,EAKXA,cACAF,EANW,EAMXA,cACAqB,EAPW,EAOXA,iBACAC,EARW,EAQXA,UACAlB,EATW,EASXA,UAGF,OACI,6BACE,qDACA,8BACIkC,SAAUrB,EACVE,MAAOvB,EACP4B,UAAWtB,EACXqC,IAAKjC,IAET,+CAAqBN,GACrB,kBAAC,EAAD,CACIqB,iBAAkBA,EAClBnB,cAAeA,IAEnB,4BACIiC,QAASb,EACTE,SAAUtB,GAFd,SAMA,2CAAiBE,KC1BLoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e44a0a7.chunk.js","sourcesContent":["import {useState, useEffect, useRef} from \"react\"\n\n/**\n * All business logic for the typing game.\n *\n * @returns {\n *  {\n *      textareaRef: React.MutableRefObject<null>,\n *      wordCount: number,\n *      handleChange: handleChange,\n *      timeRemaining: number,\n *      updateGameLength: updateGameLength,\n *      text: string,\n *      startGame: startGame,\n *      isTimeRunning: boolean\n *  }}\n */\nfunction useGameLogic() {\n    const [text, setText] = useState(\"\")\n    const [gameLength, setGameLength] = useState(10)\n    const [timeRemaining, setTimeRemaining] = useState(gameLength)\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\n    const [wordCount, setWordCount] = useState(0)\n\n    const textareaRef = useRef(null)\n\n    function handleChange(e) {\n        const {value} = e.target\n        setText(value)\n    }\n\n    function calculateWordCount(text) {\n        const wordsArr = text.trim().split(\" \")\n        return wordsArr.filter(word => word !== \"\").length\n    }\n\n    function updateGameLength(time) {\n        setTimeRemaining(time)\n        setGameLength(time)\n    }\n\n    function startGame() {\n        setIsTimeRunning(true)\n        setTimeRemaining(gameLength)\n        setText(\"\")\n        setWordCount(0)\n        textareaRef.current.disabled = false\n        textareaRef.current.focus()\n    }\n\n    function endGame() {\n        setIsTimeRunning(false)\n        setWordCount(calculateWordCount(text))\n    }\n\n    useEffect(() => {\n        if(isTimeRunning && timeRemaining > 0) {\n            setTimeout(() => {\n                setTimeRemaining(time => time - 1)\n            }, 1000)\n        } else if(timeRemaining === 0) {\n            endGame()\n        }\n    }, [timeRemaining, isTimeRunning])\n\n    return {textareaRef, handleChange, text, isTimeRunning, timeRemaining, updateGameLength, startGame, wordCount}\n}\n\nexport default useGameLogic","import React, {useState, useEffect} from \"react\"\nimport \"../styles/TimeSelector.css\"\n\nfunction TimeSelector(props){\n    const [selectedTime, setSelectedTime] = useState(10)\n    const times = [5, 10, 15, 30]\n\n    function updateSelectedTime(time) {\n        props.updateGameLength(time)\n        setSelectedTime(time)\n    }\n\n    function isSelected(time){\n        return selectedTime === time\n    }\n\n    useEffect(() => {\n        props.updateGameLength(selectedTime)\n    }, [props.isTimeRunning])\n\n    const buttons = times.map(time =>\n        <button\n            key={`time-${time}`}\n            className={`time ${isSelected(time) ? \"selected\" : \"\"}`}\n            onClick={() => updateSelectedTime(time)}\n            disabled={props.isTimeRunning}\n        >\n            {time}\n        </button>\n    )\n\n    return (\n        <div className=\"time-selector\">\n            {buttons}\n        </div>\n    )\n}\n\nexport default TimeSelector","import React from \"react\"\nimport useGameLogic from \"./hooks/useGameLogic\"\nimport TimeSelector from \"./components/TimeSelector\"\n\nimport \"./styles/App.css\"\n\nfunction App() {\n  const {\n    textareaRef,\n    handleChange,\n    text,\n    isTimeRunning,\n    timeRemaining,\n    updateGameLength,\n    startGame,\n    wordCount\n  } = useGameLogic()\n\n  return (\n      <div>\n        <h1>How fast do you type?</h1>\n        <textarea\n            onChange={handleChange}\n            value={text}\n            disabled={!isTimeRunning}\n            ref={textareaRef}\n        />\n        <h4>Time remaining: {timeRemaining}</h4>\n        <TimeSelector\n            updateGameLength={updateGameLength}\n            isTimeRunning={isTimeRunning}\n        />\n        <button\n            onClick={startGame}\n            disabled={isTimeRunning}\n        >\n          Start\n        </button>\n        <h1>Word count: {wordCount}</h1>\n      </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}