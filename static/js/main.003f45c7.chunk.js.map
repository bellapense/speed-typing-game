{"version":3,"sources":["hooks/useGameLogic.js","components/GameDisplay.js","components/TimeSelector.js","App.js","serviceWorker.js","index.js"],"names":["useGameLogic","useState","word","setWord","gameLength","setGameLength","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","displayResults","setDisplayResults","wordCount","setWordCount","randomWords","require","useEffect","setTimeout","time","updateGameLength","startGame","exactly","maxLength","toString","toUpperCase","wordCompleted","prevWordCount","GameDisplay","props","charsToMatch","split","charEntered","setCharEntered","charsMatched","setCharsMatched","document","addEventListener","event","key","indexOf","length","isDisabled","prevCharsMatched","map","char","index","isMatched","className","results","id","TimeSelector","selectedTime","setSelectedTime","isSelected","buttons","onClick","updateSelectedTime","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.003f45c7.chunk.js","sourcesContent":["import {useState, useEffect} from \"react\"\n\n/**\n * All business logic for the typing game.\n *\n * @returns {{wordCount: number, timeRemaining: number, startGame: startGame, word: string, isTimeRunning: boolean, updateGameLength: updateGameLength}}\n */\nfunction useGameLogic() {\n    const [word, setWord] = useState(\"\")\n    const [gameLength, setGameLength] = useState(10)\n    const [timeRemaining, setTimeRemaining] = useState(gameLength)\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\n    const [displayResults, setDisplayResults] = useState(false)\n    const [wordCount, setWordCount] = useState(0)\n\n    let randomWords = require('random-words')\n\n    function wordCompleted() {\n        setWordCount(prevWordCount => prevWordCount + 1)\n        const word = randomWords({exactly: 1, maxLength: 8})\n        setWord(word.toString().toUpperCase())\n    }\n\n    function updateGameLength(time) {\n        setTimeRemaining(time)\n        setGameLength(time)\n    }\n\n    function startGame() {\n        setDisplayResults(false)\n        setIsTimeRunning(true)\n        setTimeRemaining(gameLength)\n        setWordCount(0)\n        const word = randomWords({exactly: 1, maxLength: 8})\n        setWord(word.toString().toUpperCase())\n    }\n\n    function endGame() {\n        setIsTimeRunning(false)\n        setDisplayResults(true)\n    }\n\n    useEffect(() => {\n        if(isTimeRunning && timeRemaining > 0) {\n            setTimeout(() => {\n                setTimeRemaining(time => time - 1)\n            }, 1000)\n        } else if(timeRemaining === 0) {\n            endGame()\n        }\n    }, [timeRemaining, isTimeRunning])\n\n    return {\n        isTimeRunning, timeRemaining, gameLength, updateGameLength,\n        startGame, word, wordCompleted, wordCount, displayResults\n    }\n}\n\nexport default useGameLogic","import React, {useState, useEffect} from \"react\"\n\nfunction GameDisplay(props) {\n    const charsToMatch = props.word.split(\"\")\n    const [charEntered, setCharEntered] = useState(\"\")\n    const [charsMatched, setCharsMatched] = useState([])\n\n    document.addEventListener('DOMContentLoaded', () => {\n        document.addEventListener('keydown', event => {\n            const charList = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n            const key = event.key.toUpperCase()\n\n            if (charList.indexOf(key) === -1) return\n\n            setCharEntered(key)\n        })\n    })\n\n    useEffect(() => {\n        if (charEntered === charsToMatch[charsMatched.length] && !props.isDisabled) {\n            setCharsMatched(prevCharsMatched => [...prevCharsMatched, charEntered])\n        }\n        setCharEntered(\"\")\n    }, [charEntered, charsMatched, charsToMatch, props.isDisabled])\n\n    useEffect(() => {\n        if (charsMatched.length === charsToMatch.length && charsToMatch.length !== 0) {\n            props.wordCompleted()\n            setCharsMatched([])\n        }\n    }, [charsMatched, charsToMatch, props])\n\n    useEffect(() => {\n        if (props.displayResults === false) {\n            setCharsMatched([])\n        }\n    }, [props.displayResults])\n\n\n    const word = (charsToMatch.map((char, index) => {\n        let isMatched = \"\"\n        if ((index + 1) <= charsMatched.length) {\n            isMatched = \"matched\"\n        }\n        return <span key={char+index} className={isMatched}>{char}</span>\n    }))\n\n    let results = null;\n    if (props.displayResults === true) {\n        results = (\n            <span id=\"results\">\n                {props.wordCount} word{props.wordCount > 1 || !props.wordCount ? \"s \" : \" \"}\n                typed in {props.gameLength} seconds\n            </span>\n        )\n    }\n\n    return (\n        <div id=\"game-display\" className={props.isDisabled ? \"disabled\" : \"\"}>\n            <p id=\"the-word\" className={props.isDisabled ? \"disabled\" : \"\"}>\n                {word}\n            </p>\n            {results}\n        </div>\n    )\n}\n\nexport default GameDisplay","import React, {useState, useEffect} from \"react\"\nimport \"../styles/TimeSelector.css\"\n\nfunction TimeSelector(props){\n    const {updateGameLength, isTimeRunning} = props\n\n    const [selectedTime, setSelectedTime] = useState(10)\n    const times = [5, 10, 15, 30]\n\n    function updateSelectedTime(time) {\n        updateGameLength(time)\n        setSelectedTime(time)\n    }\n\n    function isSelected(time){\n        return selectedTime === time\n    }\n\n    useEffect(() => {\n        updateGameLength(selectedTime)\n    }, [isTimeRunning])\n\n    const buttons = times.map(time =>\n        <button\n            key={`time-${time}`}\n            className={`time ${isSelected(time) ? \"selected\" : \"\"}`}\n            onClick={() => updateSelectedTime(time)}\n            disabled={isTimeRunning}\n        >\n            {time}\n        </button>\n    )\n\n    return (\n        <div className=\"time-selector\">\n            {buttons}\n        </div>\n    )\n}\n\nexport default TimeSelector","import React from \"react\"\nimport useGameLogic from \"./hooks/useGameLogic\"\nimport GameDisplay from \"./components/GameDisplay\";\nimport TimeSelector from \"./components/TimeSelector\"\n\nimport \"./styles/App.css\"\n\nfunction App() {\n    const {\n        isTimeRunning,\n        timeRemaining,\n        updateGameLength,\n        gameLength,\n        startGame,\n        word,\n        wordCompleted,\n        wordCount,\n        displayResults,\n    } = useGameLogic()\n\n    return (\n        <div>\n            <h1>How fast do you type?</h1>\n            <GameDisplay\n                word={word}\n                wordCompleted={wordCompleted}\n                isDisabled={!isTimeRunning}\n                gameLength={gameLength}\n                displayResults={displayResults}\n                wordCount={wordCount}\n            />\n            <h4>Time remaining: {timeRemaining}</h4>\n            <TimeSelector\n                updateGameLength={updateGameLength}\n                isTimeRunning={isTimeRunning}\n            />\n            <button\n                onClick={startGame}\n                disabled={isTimeRunning}\n            >\n                Start\n            </button>\n            <h1>Word count: {wordCount}</h1>\n        </div>\n    )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}